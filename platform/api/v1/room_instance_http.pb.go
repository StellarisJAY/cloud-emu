// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: v1/room_instance.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoomInstanceGetRoomInstance = "/v1.RoomInstance/GetRoomInstance"
const OperationRoomInstanceListGameHistory = "/v1.RoomInstance/ListGameHistory"

type RoomInstanceHTTPServer interface {
	GetRoomInstance(context.Context, *GetRoomInstanceRequest) (*GetRoomInstanceResponse, error)
	ListGameHistory(context.Context, *ListGameHistoryRequest) (*ListGameHistoryResponse, error)
}

func RegisterRoomInstanceHTTPServer(s *http.Server, srv RoomInstanceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/room/instance", _RoomInstance_GetRoomInstance0_HTTP_Handler(srv))
	r.GET("/api/v1/room/instance/history", _RoomInstance_ListGameHistory0_HTTP_Handler(srv))
}

func _RoomInstance_GetRoomInstance0_HTTP_Handler(srv RoomInstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoomInstanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomInstanceGetRoomInstance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoomInstance(ctx, req.(*GetRoomInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoomInstanceResponse)
		return ctx.Result(200, reply)
	}
}

func _RoomInstance_ListGameHistory0_HTTP_Handler(srv RoomInstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomInstanceListGameHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameHistory(ctx, req.(*ListGameHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameHistoryResponse)
		return ctx.Result(200, reply)
	}
}

type RoomInstanceHTTPClient interface {
	GetRoomInstance(ctx context.Context, req *GetRoomInstanceRequest, opts ...http.CallOption) (rsp *GetRoomInstanceResponse, err error)
	ListGameHistory(ctx context.Context, req *ListGameHistoryRequest, opts ...http.CallOption) (rsp *ListGameHistoryResponse, err error)
}

type RoomInstanceHTTPClientImpl struct {
	cc *http.Client
}

func NewRoomInstanceHTTPClient(client *http.Client) RoomInstanceHTTPClient {
	return &RoomInstanceHTTPClientImpl{client}
}

func (c *RoomInstanceHTTPClientImpl) GetRoomInstance(ctx context.Context, in *GetRoomInstanceRequest, opts ...http.CallOption) (*GetRoomInstanceResponse, error) {
	var out GetRoomInstanceResponse
	pattern := "/api/v1/room/instance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoomInstanceGetRoomInstance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoomInstanceHTTPClientImpl) ListGameHistory(ctx context.Context, in *ListGameHistoryRequest, opts ...http.CallOption) (*ListGameHistoryResponse, error) {
	var out ListGameHistoryResponse
	pattern := "/api/v1/room/instance/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoomInstanceListGameHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
