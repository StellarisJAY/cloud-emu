// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: v1/room_instance.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoomInstance_GetRoomInstance_FullMethodName = "/v1.RoomInstance/GetRoomInstance"
	RoomInstance_ListGameHistory_FullMethodName = "/v1.RoomInstance/ListGameHistory"
)

// RoomInstanceClient is the client API for RoomInstance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomInstanceClient interface {
	GetRoomInstance(ctx context.Context, in *GetRoomInstanceRequest, opts ...grpc.CallOption) (*GetRoomInstanceResponse, error)
	ListGameHistory(ctx context.Context, in *ListGameHistoryRequest, opts ...grpc.CallOption) (*ListGameHistoryResponse, error)
}

type roomInstanceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomInstanceClient(cc grpc.ClientConnInterface) RoomInstanceClient {
	return &roomInstanceClient{cc}
}

func (c *roomInstanceClient) GetRoomInstance(ctx context.Context, in *GetRoomInstanceRequest, opts ...grpc.CallOption) (*GetRoomInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomInstanceResponse)
	err := c.cc.Invoke(ctx, RoomInstance_GetRoomInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInstanceClient) ListGameHistory(ctx context.Context, in *ListGameHistoryRequest, opts ...grpc.CallOption) (*ListGameHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGameHistoryResponse)
	err := c.cc.Invoke(ctx, RoomInstance_ListGameHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomInstanceServer is the server API for RoomInstance service.
// All implementations must embed UnimplementedRoomInstanceServer
// for forward compatibility.
type RoomInstanceServer interface {
	GetRoomInstance(context.Context, *GetRoomInstanceRequest) (*GetRoomInstanceResponse, error)
	ListGameHistory(context.Context, *ListGameHistoryRequest) (*ListGameHistoryResponse, error)
	mustEmbedUnimplementedRoomInstanceServer()
}

// UnimplementedRoomInstanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomInstanceServer struct{}

func (UnimplementedRoomInstanceServer) GetRoomInstance(context.Context, *GetRoomInstanceRequest) (*GetRoomInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomInstance not implemented")
}
func (UnimplementedRoomInstanceServer) ListGameHistory(context.Context, *ListGameHistoryRequest) (*ListGameHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameHistory not implemented")
}
func (UnimplementedRoomInstanceServer) mustEmbedUnimplementedRoomInstanceServer() {}
func (UnimplementedRoomInstanceServer) testEmbeddedByValue()                      {}

// UnsafeRoomInstanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomInstanceServer will
// result in compilation errors.
type UnsafeRoomInstanceServer interface {
	mustEmbedUnimplementedRoomInstanceServer()
}

func RegisterRoomInstanceServer(s grpc.ServiceRegistrar, srv RoomInstanceServer) {
	// If the following call pancis, it indicates UnimplementedRoomInstanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoomInstance_ServiceDesc, srv)
}

func _RoomInstance_GetRoomInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInstanceServer).GetRoomInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomInstance_GetRoomInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInstanceServer).GetRoomInstance(ctx, req.(*GetRoomInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInstance_ListGameHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInstanceServer).ListGameHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomInstance_ListGameHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInstanceServer).ListGameHistory(ctx, req.(*ListGameHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomInstance_ServiceDesc is the grpc.ServiceDesc for RoomInstance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomInstance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RoomInstance",
	HandlerType: (*RoomInstanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoomInstance",
			Handler:    _RoomInstance_GetRoomInstance_Handler,
		},
		{
			MethodName: "ListGameHistory",
			Handler:    _RoomInstance_ListGameHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/room_instance.proto",
}
