// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: emulator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Emulator_ListEmulator_FullMethodName     = "/v1.Emulator/ListEmulator"
	Emulator_ListGame_FullMethodName         = "/v1.Emulator/ListGame"
	Emulator_ListEmulatorType_FullMethodName = "/v1.Emulator/ListEmulatorType"
	Emulator_UpdateEmulator_FullMethodName   = "/v1.Emulator/UpdateEmulator"
)

// EmulatorClient is the client API for Emulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmulatorClient interface {
	ListEmulator(ctx context.Context, in *ListEmulatorRequest, opts ...grpc.CallOption) (*ListEmulatorResponse, error)
	ListGame(ctx context.Context, in *ListGameRequest, opts ...grpc.CallOption) (*ListGameResponse, error)
	ListEmulatorType(ctx context.Context, in *ListEmulatorTypeRequest, opts ...grpc.CallOption) (*ListEmulatorTypeResponse, error)
	UpdateEmulator(ctx context.Context, in *UpdateEmulatorRequest, opts ...grpc.CallOption) (*UpdateEmulatorResponse, error)
}

type emulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewEmulatorClient(cc grpc.ClientConnInterface) EmulatorClient {
	return &emulatorClient{cc}
}

func (c *emulatorClient) ListEmulator(ctx context.Context, in *ListEmulatorRequest, opts ...grpc.CallOption) (*ListEmulatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmulatorResponse)
	err := c.cc.Invoke(ctx, Emulator_ListEmulator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) ListGame(ctx context.Context, in *ListGameRequest, opts ...grpc.CallOption) (*ListGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGameResponse)
	err := c.cc.Invoke(ctx, Emulator_ListGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) ListEmulatorType(ctx context.Context, in *ListEmulatorTypeRequest, opts ...grpc.CallOption) (*ListEmulatorTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmulatorTypeResponse)
	err := c.cc.Invoke(ctx, Emulator_ListEmulatorType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) UpdateEmulator(ctx context.Context, in *UpdateEmulatorRequest, opts ...grpc.CallOption) (*UpdateEmulatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmulatorResponse)
	err := c.cc.Invoke(ctx, Emulator_UpdateEmulator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmulatorServer is the server API for Emulator service.
// All implementations must embed UnimplementedEmulatorServer
// for forward compatibility.
type EmulatorServer interface {
	ListEmulator(context.Context, *ListEmulatorRequest) (*ListEmulatorResponse, error)
	ListGame(context.Context, *ListGameRequest) (*ListGameResponse, error)
	ListEmulatorType(context.Context, *ListEmulatorTypeRequest) (*ListEmulatorTypeResponse, error)
	UpdateEmulator(context.Context, *UpdateEmulatorRequest) (*UpdateEmulatorResponse, error)
	mustEmbedUnimplementedEmulatorServer()
}

// UnimplementedEmulatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmulatorServer struct{}

func (UnimplementedEmulatorServer) ListEmulator(context.Context, *ListEmulatorRequest) (*ListEmulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmulator not implemented")
}
func (UnimplementedEmulatorServer) ListGame(context.Context, *ListGameRequest) (*ListGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGame not implemented")
}
func (UnimplementedEmulatorServer) ListEmulatorType(context.Context, *ListEmulatorTypeRequest) (*ListEmulatorTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmulatorType not implemented")
}
func (UnimplementedEmulatorServer) UpdateEmulator(context.Context, *UpdateEmulatorRequest) (*UpdateEmulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmulator not implemented")
}
func (UnimplementedEmulatorServer) mustEmbedUnimplementedEmulatorServer() {}
func (UnimplementedEmulatorServer) testEmbeddedByValue()                  {}

// UnsafeEmulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmulatorServer will
// result in compilation errors.
type UnsafeEmulatorServer interface {
	mustEmbedUnimplementedEmulatorServer()
}

func RegisterEmulatorServer(s grpc.ServiceRegistrar, srv EmulatorServer) {
	// If the following call pancis, it indicates UnimplementedEmulatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Emulator_ServiceDesc, srv)
}

func _Emulator_ListEmulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).ListEmulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emulator_ListEmulator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).ListEmulator(ctx, req.(*ListEmulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_ListGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).ListGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emulator_ListGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).ListGame(ctx, req.(*ListGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_ListEmulatorType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmulatorTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).ListEmulatorType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emulator_ListEmulatorType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).ListEmulatorType(ctx, req.(*ListEmulatorTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_UpdateEmulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).UpdateEmulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emulator_UpdateEmulator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).UpdateEmulator(ctx, req.(*UpdateEmulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Emulator_ServiceDesc is the grpc.ServiceDesc for Emulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Emulator",
	HandlerType: (*EmulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEmulator",
			Handler:    _Emulator_ListEmulator_Handler,
		},
		{
			MethodName: "ListGame",
			Handler:    _Emulator_ListGame_Handler,
		},
		{
			MethodName: "ListEmulatorType",
			Handler:    _Emulator_ListEmulatorType_Handler,
		},
		{
			MethodName: "UpdateEmulator",
			Handler:    _Emulator_UpdateEmulator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emulator.proto",
}
