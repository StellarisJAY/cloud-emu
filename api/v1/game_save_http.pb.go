// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: game_save.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGameSaveDeleteGameSave = "/v1.GameSave/DeleteGameSave"
const OperationGameSaveListGameSave = "/v1.GameSave/ListGameSave"
const OperationGameSaveLoadSave = "/v1.GameSave/LoadSave"
const OperationGameSaveSaveGame = "/v1.GameSave/SaveGame"

type GameSaveHTTPServer interface {
	DeleteGameSave(context.Context, *DeleteGameSaveRequest) (*DeleteGameSaveResponse, error)
	ListGameSave(context.Context, *ListGameSaveRequest) (*ListGameSaveResponse, error)
	LoadSave(context.Context, *LoadSaveRequest) (*LoadSaveResponse, error)
	SaveGame(context.Context, *SaveGameRequest) (*SaveGameResponse, error)
}

func RegisterGameSaveHTTPServer(s *http.Server, srv GameSaveHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/game-save", _GameSave_ListGameSave0_HTTP_Handler(srv))
	r.DELETE("/api/v1/game-save/{saveId}", _GameSave_DeleteGameSave0_HTTP_Handler(srv))
	r.POST("/api/v1/game-save/load", _GameSave_LoadSave0_HTTP_Handler(srv))
	r.POST("/api/v1/game-save/save", _GameSave_SaveGame0_HTTP_Handler(srv))
}

func _GameSave_ListGameSave0_HTTP_Handler(srv GameSaveHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameSaveRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameSaveListGameSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameSave(ctx, req.(*ListGameSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameSaveResponse)
		return ctx.Result(200, reply)
	}
}

func _GameSave_DeleteGameSave0_HTTP_Handler(srv GameSaveHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGameSaveRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameSaveDeleteGameSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGameSave(ctx, req.(*DeleteGameSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGameSaveResponse)
		return ctx.Result(200, reply)
	}
}

func _GameSave_LoadSave0_HTTP_Handler(srv GameSaveHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoadSaveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameSaveLoadSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoadSave(ctx, req.(*LoadSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoadSaveResponse)
		return ctx.Result(200, reply)
	}
}

func _GameSave_SaveGame0_HTTP_Handler(srv GameSaveHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveGameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameSaveSaveGame)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveGame(ctx, req.(*SaveGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveGameResponse)
		return ctx.Result(200, reply)
	}
}

type GameSaveHTTPClient interface {
	DeleteGameSave(ctx context.Context, req *DeleteGameSaveRequest, opts ...http.CallOption) (rsp *DeleteGameSaveResponse, err error)
	ListGameSave(ctx context.Context, req *ListGameSaveRequest, opts ...http.CallOption) (rsp *ListGameSaveResponse, err error)
	LoadSave(ctx context.Context, req *LoadSaveRequest, opts ...http.CallOption) (rsp *LoadSaveResponse, err error)
	SaveGame(ctx context.Context, req *SaveGameRequest, opts ...http.CallOption) (rsp *SaveGameResponse, err error)
}

type GameSaveHTTPClientImpl struct {
	cc *http.Client
}

func NewGameSaveHTTPClient(client *http.Client) GameSaveHTTPClient {
	return &GameSaveHTTPClientImpl{client}
}

func (c *GameSaveHTTPClientImpl) DeleteGameSave(ctx context.Context, in *DeleteGameSaveRequest, opts ...http.CallOption) (*DeleteGameSaveResponse, error) {
	var out DeleteGameSaveResponse
	pattern := "/api/v1/game-save/{saveId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGameSaveDeleteGameSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameSaveHTTPClientImpl) ListGameSave(ctx context.Context, in *ListGameSaveRequest, opts ...http.CallOption) (*ListGameSaveResponse, error) {
	var out ListGameSaveResponse
	pattern := "/api/v1/game-save"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGameSaveListGameSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameSaveHTTPClientImpl) LoadSave(ctx context.Context, in *LoadSaveRequest, opts ...http.CallOption) (*LoadSaveResponse, error) {
	var out LoadSaveResponse
	pattern := "/api/v1/game-save/load"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameSaveLoadSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameSaveHTTPClientImpl) SaveGame(ctx context.Context, in *SaveGameRequest, opts ...http.CallOption) (*SaveGameResponse, error) {
	var out SaveGameResponse
	pattern := "/api/v1/game-save/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameSaveSaveGame))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
