// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: game_save.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameSave_ListGameSave_FullMethodName   = "/v1.GameSave/ListGameSave"
	GameSave_DeleteGameSave_FullMethodName = "/v1.GameSave/DeleteGameSave"
	GameSave_LoadSave_FullMethodName       = "/v1.GameSave/LoadSave"
	GameSave_SaveGame_FullMethodName       = "/v1.GameSave/SaveGame"
	GameSave_TransferSave_FullMethodName   = "/v1.GameSave/TransferSave"
	GameSave_RenameSave_FullMethodName     = "/v1.GameSave/RenameSave"
)

// GameSaveClient is the client API for GameSave service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameSaveClient interface {
	ListGameSave(ctx context.Context, in *ListGameSaveRequest, opts ...grpc.CallOption) (*ListGameSaveResponse, error)
	DeleteGameSave(ctx context.Context, in *DeleteGameSaveRequest, opts ...grpc.CallOption) (*DeleteGameSaveResponse, error)
	LoadSave(ctx context.Context, in *LoadSaveRequest, opts ...grpc.CallOption) (*LoadSaveResponse, error)
	SaveGame(ctx context.Context, in *SaveGameRequest, opts ...grpc.CallOption) (*SaveGameResponse, error)
	TransferSave(ctx context.Context, in *TransferSaveRequest, opts ...grpc.CallOption) (*TransferSaveResponse, error)
	RenameSave(ctx context.Context, in *RenameSaveRequest, opts ...grpc.CallOption) (*RenameSaveResponse, error)
}

type gameSaveClient struct {
	cc grpc.ClientConnInterface
}

func NewGameSaveClient(cc grpc.ClientConnInterface) GameSaveClient {
	return &gameSaveClient{cc}
}

func (c *gameSaveClient) ListGameSave(ctx context.Context, in *ListGameSaveRequest, opts ...grpc.CallOption) (*ListGameSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGameSaveResponse)
	err := c.cc.Invoke(ctx, GameSave_ListGameSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameSaveClient) DeleteGameSave(ctx context.Context, in *DeleteGameSaveRequest, opts ...grpc.CallOption) (*DeleteGameSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGameSaveResponse)
	err := c.cc.Invoke(ctx, GameSave_DeleteGameSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameSaveClient) LoadSave(ctx context.Context, in *LoadSaveRequest, opts ...grpc.CallOption) (*LoadSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadSaveResponse)
	err := c.cc.Invoke(ctx, GameSave_LoadSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameSaveClient) SaveGame(ctx context.Context, in *SaveGameRequest, opts ...grpc.CallOption) (*SaveGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveGameResponse)
	err := c.cc.Invoke(ctx, GameSave_SaveGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameSaveClient) TransferSave(ctx context.Context, in *TransferSaveRequest, opts ...grpc.CallOption) (*TransferSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferSaveResponse)
	err := c.cc.Invoke(ctx, GameSave_TransferSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameSaveClient) RenameSave(ctx context.Context, in *RenameSaveRequest, opts ...grpc.CallOption) (*RenameSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameSaveResponse)
	err := c.cc.Invoke(ctx, GameSave_RenameSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameSaveServer is the server API for GameSave service.
// All implementations must embed UnimplementedGameSaveServer
// for forward compatibility.
type GameSaveServer interface {
	ListGameSave(context.Context, *ListGameSaveRequest) (*ListGameSaveResponse, error)
	DeleteGameSave(context.Context, *DeleteGameSaveRequest) (*DeleteGameSaveResponse, error)
	LoadSave(context.Context, *LoadSaveRequest) (*LoadSaveResponse, error)
	SaveGame(context.Context, *SaveGameRequest) (*SaveGameResponse, error)
	TransferSave(context.Context, *TransferSaveRequest) (*TransferSaveResponse, error)
	RenameSave(context.Context, *RenameSaveRequest) (*RenameSaveResponse, error)
	mustEmbedUnimplementedGameSaveServer()
}

// UnimplementedGameSaveServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameSaveServer struct{}

func (UnimplementedGameSaveServer) ListGameSave(context.Context, *ListGameSaveRequest) (*ListGameSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameSave not implemented")
}
func (UnimplementedGameSaveServer) DeleteGameSave(context.Context, *DeleteGameSaveRequest) (*DeleteGameSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameSave not implemented")
}
func (UnimplementedGameSaveServer) LoadSave(context.Context, *LoadSaveRequest) (*LoadSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSave not implemented")
}
func (UnimplementedGameSaveServer) SaveGame(context.Context, *SaveGameRequest) (*SaveGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGame not implemented")
}
func (UnimplementedGameSaveServer) TransferSave(context.Context, *TransferSaveRequest) (*TransferSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferSave not implemented")
}
func (UnimplementedGameSaveServer) RenameSave(context.Context, *RenameSaveRequest) (*RenameSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameSave not implemented")
}
func (UnimplementedGameSaveServer) mustEmbedUnimplementedGameSaveServer() {}
func (UnimplementedGameSaveServer) testEmbeddedByValue()                  {}

// UnsafeGameSaveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameSaveServer will
// result in compilation errors.
type UnsafeGameSaveServer interface {
	mustEmbedUnimplementedGameSaveServer()
}

func RegisterGameSaveServer(s grpc.ServiceRegistrar, srv GameSaveServer) {
	// If the following call pancis, it indicates UnimplementedGameSaveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameSave_ServiceDesc, srv)
}

func _GameSave_ListGameSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSaveServer).ListGameSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameSave_ListGameSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSaveServer).ListGameSave(ctx, req.(*ListGameSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameSave_DeleteGameSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSaveServer).DeleteGameSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameSave_DeleteGameSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSaveServer).DeleteGameSave(ctx, req.(*DeleteGameSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameSave_LoadSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSaveServer).LoadSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameSave_LoadSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSaveServer).LoadSave(ctx, req.(*LoadSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameSave_SaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSaveServer).SaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameSave_SaveGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSaveServer).SaveGame(ctx, req.(*SaveGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameSave_TransferSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSaveServer).TransferSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameSave_TransferSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSaveServer).TransferSave(ctx, req.(*TransferSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameSave_RenameSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSaveServer).RenameSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameSave_RenameSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSaveServer).RenameSave(ctx, req.(*RenameSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameSave_ServiceDesc is the grpc.ServiceDesc for GameSave service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameSave_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GameSave",
	HandlerType: (*GameSaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGameSave",
			Handler:    _GameSave_ListGameSave_Handler,
		},
		{
			MethodName: "DeleteGameSave",
			Handler:    _GameSave_DeleteGameSave_Handler,
		},
		{
			MethodName: "LoadSave",
			Handler:    _GameSave_LoadSave_Handler,
		},
		{
			MethodName: "SaveGame",
			Handler:    _GameSave_SaveGame_Handler,
		},
		{
			MethodName: "TransferSave",
			Handler:    _GameSave_TransferSave_Handler,
		},
		{
			MethodName: "RenameSave",
			Handler:    _GameSave_RenameSave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_save.proto",
}
