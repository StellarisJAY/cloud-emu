// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: game.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Game_OpenGameInstance_FullMethodName           = "/v1.Game/OpenGameInstance"
	Game_GetRoomInstanceAccessToken_FullMethodName = "/v1.Game/GetRoomInstanceAccessToken"
	Game_ShutdownRoomInstance_FullMethodName       = "/v1.Game/ShutdownRoomInstance"
	Game_OpenGameConnection_FullMethodName         = "/v1.Game/OpenGameConnection"
	Game_SdpAnswer_FullMethodName                  = "/v1.Game/SdpAnswer"
	Game_AddIceCandidate_FullMethodName            = "/v1.Game/AddIceCandidate"
	Game_GetIceCandidate_FullMethodName            = "/v1.Game/GetIceCandidate"
	Game_RestartGameInstance_FullMethodName        = "/v1.Game/RestartGameInstance"
	Game_SaveGame_FullMethodName                   = "/v1.Game/SaveGame"
	Game_LoadSave_FullMethodName                   = "/v1.Game/LoadSave"
	Game_ListOnlineRoomMember_FullMethodName       = "/v1.Game/ListOnlineRoomMember"
	Game_GetControllerPlayers_FullMethodName       = "/v1.Game/GetControllerPlayers"
	Game_SetControllerPlayer_FullMethodName        = "/v1.Game/SetControllerPlayer"
)

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	OpenGameInstance(ctx context.Context, in *OpenGameInstanceRequest, opts ...grpc.CallOption) (*OpenGameInstanceResponse, error)
	GetRoomInstanceAccessToken(ctx context.Context, in *GetRoomInstanceAccessTokenRequest, opts ...grpc.CallOption) (*GetRoomInstanceAccessTokenResponse, error)
	ShutdownRoomInstance(ctx context.Context, in *ShutdownRoomInstanceRequest, opts ...grpc.CallOption) (*ShutdownRoomInstanceResponse, error)
	OpenGameConnection(ctx context.Context, in *GameSrvOpenGameConnectionRequest, opts ...grpc.CallOption) (*GameSrvOpenGameConnectionResponse, error)
	SdpAnswer(ctx context.Context, in *GameSrvSdpAnswerRequest, opts ...grpc.CallOption) (*GameSrvSdpAnswerResponse, error)
	AddIceCandidate(ctx context.Context, in *GameSrvAddIceCandidateRequest, opts ...grpc.CallOption) (*GameSrvAddIceCandidateResponse, error)
	GetIceCandidate(ctx context.Context, in *GetIceCandidateRequest, opts ...grpc.CallOption) (*GetIceCandidateResponse, error)
	RestartGameInstance(ctx context.Context, in *RestartGameInstanceRequest, opts ...grpc.CallOption) (*RestartGameInstanceResponse, error)
	SaveGame(ctx context.Context, in *GameSrvSaveGameRequest, opts ...grpc.CallOption) (*GameSrvSaveGameResponse, error)
	LoadSave(ctx context.Context, in *GameSrvLoadSaveRequest, opts ...grpc.CallOption) (*GameSrvLoadSaveResponse, error)
	ListOnlineRoomMember(ctx context.Context, in *ListOnlineRoomMemberRequest, opts ...grpc.CallOption) (*ListOnlineRoomMemberResponse, error)
	GetControllerPlayers(ctx context.Context, in *GameSrvGetControllerPlayersRequest, opts ...grpc.CallOption) (*GameSrvGetControllerPlayersResponse, error)
	SetControllerPlayer(ctx context.Context, in *GameSrvSetControllerPlayerRequest, opts ...grpc.CallOption) (*GameSrvSetControllerPlayerResponse, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) OpenGameInstance(ctx context.Context, in *OpenGameInstanceRequest, opts ...grpc.CallOption) (*OpenGameInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenGameInstanceResponse)
	err := c.cc.Invoke(ctx, Game_OpenGameInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetRoomInstanceAccessToken(ctx context.Context, in *GetRoomInstanceAccessTokenRequest, opts ...grpc.CallOption) (*GetRoomInstanceAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomInstanceAccessTokenResponse)
	err := c.cc.Invoke(ctx, Game_GetRoomInstanceAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ShutdownRoomInstance(ctx context.Context, in *ShutdownRoomInstanceRequest, opts ...grpc.CallOption) (*ShutdownRoomInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownRoomInstanceResponse)
	err := c.cc.Invoke(ctx, Game_ShutdownRoomInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) OpenGameConnection(ctx context.Context, in *GameSrvOpenGameConnectionRequest, opts ...grpc.CallOption) (*GameSrvOpenGameConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSrvOpenGameConnectionResponse)
	err := c.cc.Invoke(ctx, Game_OpenGameConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SdpAnswer(ctx context.Context, in *GameSrvSdpAnswerRequest, opts ...grpc.CallOption) (*GameSrvSdpAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSrvSdpAnswerResponse)
	err := c.cc.Invoke(ctx, Game_SdpAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AddIceCandidate(ctx context.Context, in *GameSrvAddIceCandidateRequest, opts ...grpc.CallOption) (*GameSrvAddIceCandidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSrvAddIceCandidateResponse)
	err := c.cc.Invoke(ctx, Game_AddIceCandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetIceCandidate(ctx context.Context, in *GetIceCandidateRequest, opts ...grpc.CallOption) (*GetIceCandidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIceCandidateResponse)
	err := c.cc.Invoke(ctx, Game_GetIceCandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) RestartGameInstance(ctx context.Context, in *RestartGameInstanceRequest, opts ...grpc.CallOption) (*RestartGameInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartGameInstanceResponse)
	err := c.cc.Invoke(ctx, Game_RestartGameInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SaveGame(ctx context.Context, in *GameSrvSaveGameRequest, opts ...grpc.CallOption) (*GameSrvSaveGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSrvSaveGameResponse)
	err := c.cc.Invoke(ctx, Game_SaveGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) LoadSave(ctx context.Context, in *GameSrvLoadSaveRequest, opts ...grpc.CallOption) (*GameSrvLoadSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSrvLoadSaveResponse)
	err := c.cc.Invoke(ctx, Game_LoadSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ListOnlineRoomMember(ctx context.Context, in *ListOnlineRoomMemberRequest, opts ...grpc.CallOption) (*ListOnlineRoomMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOnlineRoomMemberResponse)
	err := c.cc.Invoke(ctx, Game_ListOnlineRoomMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetControllerPlayers(ctx context.Context, in *GameSrvGetControllerPlayersRequest, opts ...grpc.CallOption) (*GameSrvGetControllerPlayersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSrvGetControllerPlayersResponse)
	err := c.cc.Invoke(ctx, Game_GetControllerPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SetControllerPlayer(ctx context.Context, in *GameSrvSetControllerPlayerRequest, opts ...grpc.CallOption) (*GameSrvSetControllerPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSrvSetControllerPlayerResponse)
	err := c.cc.Invoke(ctx, Game_SetControllerPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility.
type GameServer interface {
	OpenGameInstance(context.Context, *OpenGameInstanceRequest) (*OpenGameInstanceResponse, error)
	GetRoomInstanceAccessToken(context.Context, *GetRoomInstanceAccessTokenRequest) (*GetRoomInstanceAccessTokenResponse, error)
	ShutdownRoomInstance(context.Context, *ShutdownRoomInstanceRequest) (*ShutdownRoomInstanceResponse, error)
	OpenGameConnection(context.Context, *GameSrvOpenGameConnectionRequest) (*GameSrvOpenGameConnectionResponse, error)
	SdpAnswer(context.Context, *GameSrvSdpAnswerRequest) (*GameSrvSdpAnswerResponse, error)
	AddIceCandidate(context.Context, *GameSrvAddIceCandidateRequest) (*GameSrvAddIceCandidateResponse, error)
	GetIceCandidate(context.Context, *GetIceCandidateRequest) (*GetIceCandidateResponse, error)
	RestartGameInstance(context.Context, *RestartGameInstanceRequest) (*RestartGameInstanceResponse, error)
	SaveGame(context.Context, *GameSrvSaveGameRequest) (*GameSrvSaveGameResponse, error)
	LoadSave(context.Context, *GameSrvLoadSaveRequest) (*GameSrvLoadSaveResponse, error)
	ListOnlineRoomMember(context.Context, *ListOnlineRoomMemberRequest) (*ListOnlineRoomMemberResponse, error)
	GetControllerPlayers(context.Context, *GameSrvGetControllerPlayersRequest) (*GameSrvGetControllerPlayersResponse, error)
	SetControllerPlayer(context.Context, *GameSrvSetControllerPlayerRequest) (*GameSrvSetControllerPlayerResponse, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServer struct{}

func (UnimplementedGameServer) OpenGameInstance(context.Context, *OpenGameInstanceRequest) (*OpenGameInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGameInstance not implemented")
}
func (UnimplementedGameServer) GetRoomInstanceAccessToken(context.Context, *GetRoomInstanceAccessTokenRequest) (*GetRoomInstanceAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomInstanceAccessToken not implemented")
}
func (UnimplementedGameServer) ShutdownRoomInstance(context.Context, *ShutdownRoomInstanceRequest) (*ShutdownRoomInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownRoomInstance not implemented")
}
func (UnimplementedGameServer) OpenGameConnection(context.Context, *GameSrvOpenGameConnectionRequest) (*GameSrvOpenGameConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGameConnection not implemented")
}
func (UnimplementedGameServer) SdpAnswer(context.Context, *GameSrvSdpAnswerRequest) (*GameSrvSdpAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SdpAnswer not implemented")
}
func (UnimplementedGameServer) AddIceCandidate(context.Context, *GameSrvAddIceCandidateRequest) (*GameSrvAddIceCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIceCandidate not implemented")
}
func (UnimplementedGameServer) GetIceCandidate(context.Context, *GetIceCandidateRequest) (*GetIceCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIceCandidate not implemented")
}
func (UnimplementedGameServer) RestartGameInstance(context.Context, *RestartGameInstanceRequest) (*RestartGameInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartGameInstance not implemented")
}
func (UnimplementedGameServer) SaveGame(context.Context, *GameSrvSaveGameRequest) (*GameSrvSaveGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGame not implemented")
}
func (UnimplementedGameServer) LoadSave(context.Context, *GameSrvLoadSaveRequest) (*GameSrvLoadSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSave not implemented")
}
func (UnimplementedGameServer) ListOnlineRoomMember(context.Context, *ListOnlineRoomMemberRequest) (*ListOnlineRoomMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOnlineRoomMember not implemented")
}
func (UnimplementedGameServer) GetControllerPlayers(context.Context, *GameSrvGetControllerPlayersRequest) (*GameSrvGetControllerPlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerPlayers not implemented")
}
func (UnimplementedGameServer) SetControllerPlayer(context.Context, *GameSrvSetControllerPlayerRequest) (*GameSrvSetControllerPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetControllerPlayer not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}
func (UnimplementedGameServer) testEmbeddedByValue()              {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	// If the following call pancis, it indicates UnimplementedGameServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_OpenGameInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGameInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).OpenGameInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_OpenGameInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).OpenGameInstance(ctx, req.(*OpenGameInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetRoomInstanceAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomInstanceAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetRoomInstanceAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_GetRoomInstanceAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetRoomInstanceAccessToken(ctx, req.(*GetRoomInstanceAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ShutdownRoomInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRoomInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ShutdownRoomInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_ShutdownRoomInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ShutdownRoomInstance(ctx, req.(*ShutdownRoomInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_OpenGameConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSrvOpenGameConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).OpenGameConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_OpenGameConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).OpenGameConnection(ctx, req.(*GameSrvOpenGameConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SdpAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSrvSdpAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SdpAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_SdpAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SdpAnswer(ctx, req.(*GameSrvSdpAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AddIceCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSrvAddIceCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AddIceCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_AddIceCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AddIceCandidate(ctx, req.(*GameSrvAddIceCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetIceCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIceCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetIceCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_GetIceCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetIceCandidate(ctx, req.(*GetIceCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_RestartGameInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartGameInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).RestartGameInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_RestartGameInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).RestartGameInstance(ctx, req.(*RestartGameInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSrvSaveGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_SaveGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SaveGame(ctx, req.(*GameSrvSaveGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_LoadSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSrvLoadSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).LoadSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_LoadSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).LoadSave(ctx, req.(*GameSrvLoadSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ListOnlineRoomMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOnlineRoomMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ListOnlineRoomMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_ListOnlineRoomMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ListOnlineRoomMember(ctx, req.(*ListOnlineRoomMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetControllerPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSrvGetControllerPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetControllerPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_GetControllerPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetControllerPlayers(ctx, req.(*GameSrvGetControllerPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SetControllerPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSrvSetControllerPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SetControllerPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_SetControllerPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SetControllerPlayer(ctx, req.(*GameSrvSetControllerPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenGameInstance",
			Handler:    _Game_OpenGameInstance_Handler,
		},
		{
			MethodName: "GetRoomInstanceAccessToken",
			Handler:    _Game_GetRoomInstanceAccessToken_Handler,
		},
		{
			MethodName: "ShutdownRoomInstance",
			Handler:    _Game_ShutdownRoomInstance_Handler,
		},
		{
			MethodName: "OpenGameConnection",
			Handler:    _Game_OpenGameConnection_Handler,
		},
		{
			MethodName: "SdpAnswer",
			Handler:    _Game_SdpAnswer_Handler,
		},
		{
			MethodName: "AddIceCandidate",
			Handler:    _Game_AddIceCandidate_Handler,
		},
		{
			MethodName: "GetIceCandidate",
			Handler:    _Game_GetIceCandidate_Handler,
		},
		{
			MethodName: "RestartGameInstance",
			Handler:    _Game_RestartGameInstance_Handler,
		},
		{
			MethodName: "SaveGame",
			Handler:    _Game_SaveGame_Handler,
		},
		{
			MethodName: "LoadSave",
			Handler:    _Game_LoadSave_Handler,
		},
		{
			MethodName: "ListOnlineRoomMember",
			Handler:    _Game_ListOnlineRoomMember_Handler,
		},
		{
			MethodName: "GetControllerPlayers",
			Handler:    _Game_GetControllerPlayers_Handler,
		},
		{
			MethodName: "SetControllerPlayer",
			Handler:    _Game_SetControllerPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}
