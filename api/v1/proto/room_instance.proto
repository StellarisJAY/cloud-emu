syntax = "proto3";

package v1;

import "google/api/annotations.proto";

option go_package = "platform/api/v1;v1";

service RoomInstance {
  rpc GetRoomInstance(GetRoomInstanceRequest) returns (GetRoomInstanceResponse) {
    option (google.api.http) = {
      get: "/api/v1/room-instance"
    };
  }

  rpc ListGameHistory(ListGameHistoryRequest) returns (ListGameHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/room-instance/history"
    };
  }

  rpc OpenGameConnection(OpenGameConnectionRequest) returns (OpenGameConnectionResponse) {
    option (google.api.http) = {
      post: "/api/v1/room-instance/connect"
      body: "*"
    };
  }

  rpc SdpAnswer(SdpAnswerRequest) returns (SdpAnswerResponse) {
    option (google.api.http) = {
      post: "/api/v1/room-instance/sdp-answer"
      body: "*"
    };
  }

  rpc AddIceCandidate(AddIceCandidateRequest) returns (AddIceCandidateResponse) {
    option (google.api.http) = {
      post: "/api/v1/room-instance/ice-candidate"
      body: "*"
    };
  }

  rpc GetServerIceCandidate(GetServerIceCandidateRequest) returns (GetServerIceCandidateResponse) {
    option (google.api.http) = {
      get: "/api/v1/room-instance/ice-candidate"
    };
  }

  rpc RestartRoomInstance(RestartRoomInstanceRequest) returns (RestartRoomInstanceResponse) {
    option (google.api.http) = {
      post: "/api/v1/room-instance/restart"
      body: "*"
    };
  }

  rpc GetControllerPlayers(GetControllerPlayersRequest) returns (GetControllerPlayersResponse) {
    option (google.api.http) = {
      get: "/api/v1/room-instance/controller-players"
    };
  }

  rpc SetControllerPlayer(SetControllerPlayerRequest) returns (SetControllerPlayerResponse) {
    option (google.api.http) = {
      post: "/api/v1/room-instance/controller-players"
      body: "*"
    };
  }

  rpc GetGraphicOptions(GetGraphicOptionsRequest) returns (GetGraphicOptionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/room-instance/graphic-options"
    };
  }
  rpc SetGraphicOptions(SetGraphicOptionsRequest) returns (SetGraphicOptionsResponse) {
    option (google.api.http) = {
      post: "/api/v1/room-instance/graphic-options"
      body: "*"
    };
  }

  rpc GetEmulatorSpeed(GetEmulatorSpeedRequest) returns (GetEmulatorSpeedResponse) {
    option (google.api.http) = {
      get: "/api/v1/room-instance/emulator-speed"
    };
  }
  rpc SetEmulatorSpeed(SetEmulatorSpeedRequest) returns (SetEmulatorSpeedResponse) {
    option (google.api.http) = {
      post: "/api/v1/room-instance/emulator-speed"
      body: "*"
    };
  }
}

message RoomInstanceDto {
  int64 roomInstanceId = 1;
  int64 roomId = 2;
  int64 emulatorId = 3;
  string emulatorName = 4;
  string serverIp = 5;
  int64 gameId = 6;
  string gameName = 7;
}

message GetRoomInstanceResult {
  RoomInstanceDto roomInstance = 1;
  string accessToken = 2;
}

message GetRoomInstanceRequest {
  int64 roomId = 1;
}

message GetRoomInstanceResponse {
  int32 code = 1;
  string message = 2;
  GetRoomInstanceResult data = 3;
}

message ListGameHistoryRequest {
  int64 roomId = 1;
  int32 page = 2;
  int32 pageSize = 3;
}

message ListGameHistoryResponse {
  int32 code = 1;
  string message = 2;
  repeated RoomInstanceDto data = 3;
  int32 total = 4;
}

message OpenGameConnectionResult {
  string sdpOffer = 1;
}

message OpenGameConnectionRequest {
  int64 roomId = 1;
  string token = 2;
}

message OpenGameConnectionResponse {
  int32 code = 1;
  string message = 2;
  OpenGameConnectionResult data = 3;
}

message SdpAnswerRequest {
  int64 roomId = 1;
  string token = 2;
  string sdpAnswer = 3;
}

message SdpAnswerResponse {
  int32 code = 1;
  string message = 2;
}

message AddIceCandidateRequest {
  int64 roomId = 1;
  string token = 2;
  string iceCandidate = 3;
}

message AddIceCandidateResponse {
  int32 code = 1;
  string message = 2;
}

message GetServerIceCandidateRequest {
  int64 roomId = 1;
  string token = 2;
}

message GetServerIceCandidateResponse {
  int32 code = 1;
  string message = 2;
  repeated string data = 3;
}

message RestartRoomInstanceRequest {
  int64 roomId = 1;
  int64 emulatorId = 2;
  int64 gameId = 3;
}

message RestartRoomInstanceResponse {
  int32 code = 1;
  string message = 2;
}

message GetControllerPlayersRequest {
  int64 roomId = 1;
}

message ControllerPlayer {
  int64 userId = 1;
  string label = 2;
  int32 controllerId = 3;
}

message GetControllerPlayersResponse {
  int32 code = 1;
  string message = 2;
  repeated ControllerPlayer data = 3;
}

message SetControllerPlayerRequest {
  int64 roomId = 1;
  repeated ControllerPlayer data = 2;
}

message SetControllerPlayerResponse {
  int32 code = 1;
  string message = 2;
  repeated ControllerPlayer data = 3;
}

message GraphicOptions {
  bool highResolution = 1;
}

message GetGraphicOptionsRequest {
  int64 roomId = 1;
}

message GetGraphicOptionsResponse {
  int32 code = 1;
  string message = 2;
  GraphicOptions data = 3;
}

message SetGraphicOptionsRequest {
  int64 roomId = 1;
  GraphicOptions data = 2;
}

message SetGraphicOptionsResponse {
  int32 code = 1;
  string message = 2;
}

message GetEmulatorSpeedRequest {
  int64 roomId = 1;
}

message GetEmulatorSpeedResponse {
  int32 code = 1;
  string message = 2;
  double data = 3;
}

message SetEmulatorSpeedRequest {
  int64 roomId = 1;
  double boost = 2;
}

message SetEmulatorSpeedResponse {
  int32 code = 1;
  string message = 2;
  double data = 3;
}