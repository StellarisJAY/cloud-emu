// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: room.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoomCreateRoom = "/v1.Room/CreateRoom"
const OperationRoomDeleteRoom = "/v1.Room/DeleteRoom"
const OperationRoomGetRoom = "/v1.Room/GetRoom"
const OperationRoomListAllRooms = "/v1.Room/ListAllRooms"
const OperationRoomListMyRooms = "/v1.Room/ListMyRooms"

type RoomHTTPServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	ListAllRooms(context.Context, *ListRoomRequest) (*ListRoomResponse, error)
	ListMyRooms(context.Context, *ListRoomRequest) (*ListRoomResponse, error)
}

func RegisterRoomHTTPServer(s *http.Server, srv RoomHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/rooms/joined", _Room_ListMyRooms0_HTTP_Handler(srv))
	r.GET("/api/v1/rooms", _Room_ListAllRooms0_HTTP_Handler(srv))
	r.POST("/api/v1/room", _Room_CreateRoom0_HTTP_Handler(srv))
	r.GET("/api/v1/room/{id}", _Room_GetRoom0_HTTP_Handler(srv))
	r.DELETE("/api/v1/room/{roomId}", _Room_DeleteRoom0_HTTP_Handler(srv))
}

func _Room_ListMyRooms0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomListMyRooms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyRooms(ctx, req.(*ListRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _Room_ListAllRooms0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomListAllRooms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAllRooms(ctx, req.(*ListRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _Room_CreateRoom0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomCreateRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoom(ctx, req.(*CreateRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _Room_GetRoom0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomGetRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoom(ctx, req.(*GetRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _Room_DeleteRoom0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomDeleteRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoom(ctx, req.(*DeleteRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoomResponse)
		return ctx.Result(200, reply)
	}
}

type RoomHTTPClient interface {
	CreateRoom(ctx context.Context, req *CreateRoomRequest, opts ...http.CallOption) (rsp *CreateRoomResponse, err error)
	DeleteRoom(ctx context.Context, req *DeleteRoomRequest, opts ...http.CallOption) (rsp *DeleteRoomResponse, err error)
	GetRoom(ctx context.Context, req *GetRoomRequest, opts ...http.CallOption) (rsp *GetRoomResponse, err error)
	ListAllRooms(ctx context.Context, req *ListRoomRequest, opts ...http.CallOption) (rsp *ListRoomResponse, err error)
	ListMyRooms(ctx context.Context, req *ListRoomRequest, opts ...http.CallOption) (rsp *ListRoomResponse, err error)
}

type RoomHTTPClientImpl struct {
	cc *http.Client
}

func NewRoomHTTPClient(client *http.Client) RoomHTTPClient {
	return &RoomHTTPClientImpl{client}
}

func (c *RoomHTTPClientImpl) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...http.CallOption) (*CreateRoomResponse, error) {
	var out CreateRoomResponse
	pattern := "/api/v1/room"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoomCreateRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoomHTTPClientImpl) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...http.CallOption) (*DeleteRoomResponse, error) {
	var out DeleteRoomResponse
	pattern := "/api/v1/room/{roomId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoomDeleteRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoomHTTPClientImpl) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...http.CallOption) (*GetRoomResponse, error) {
	var out GetRoomResponse
	pattern := "/api/v1/room/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoomGetRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoomHTTPClientImpl) ListAllRooms(ctx context.Context, in *ListRoomRequest, opts ...http.CallOption) (*ListRoomResponse, error) {
	var out ListRoomResponse
	pattern := "/api/v1/rooms"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoomListAllRooms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoomHTTPClientImpl) ListMyRooms(ctx context.Context, in *ListRoomRequest, opts ...http.CallOption) (*ListRoomResponse, error) {
	var out ListRoomResponse
	pattern := "/api/v1/rooms/joined"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoomListMyRooms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
