// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: keyboard_binding.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKeyboardBindingCreateKeyboardBinding = "/v1.KeyboardBinding/CreateKeyboardBinding"
const OperationKeyboardBindingDeleteKeyboardBinding = "/v1.KeyboardBinding/DeleteKeyboardBinding"
const OperationKeyboardBindingListKeyboardBinding = "/v1.KeyboardBinding/ListKeyboardBinding"
const OperationKeyboardBindingUpdateKeyboardBinding = "/v1.KeyboardBinding/UpdateKeyboardBinding"

type KeyboardBindingHTTPServer interface {
	CreateKeyboardBinding(context.Context, *CreateKeyboardBindingRequest) (*CreateKeyboardBindingResponse, error)
	DeleteKeyboardBinding(context.Context, *DeleteKeyboardBindingRequest) (*DeleteKeyboardBindingResponse, error)
	ListKeyboardBinding(context.Context, *ListKeyboardBindingRequest) (*ListKeyboardBindingResponse, error)
	UpdateKeyboardBinding(context.Context, *UpdateKeyboardBindingRequest) (*UpdateKeyboardBindingResponse, error)
}

func RegisterKeyboardBindingHTTPServer(s *http.Server, srv KeyboardBindingHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/keyboard-binding", _KeyboardBinding_ListKeyboardBinding0_HTTP_Handler(srv))
	r.POST("/api/v1/keyboard-binding", _KeyboardBinding_CreateKeyboardBinding0_HTTP_Handler(srv))
	r.PUT("/api/v1/keyboard-binding/{bindingId}", _KeyboardBinding_UpdateKeyboardBinding0_HTTP_Handler(srv))
	r.DELETE("/api/v1/keyboard-binding/{bindingId}", _KeyboardBinding_DeleteKeyboardBinding0_HTTP_Handler(srv))
}

func _KeyboardBinding_ListKeyboardBinding0_HTTP_Handler(srv KeyboardBindingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListKeyboardBindingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKeyboardBindingListKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListKeyboardBinding(ctx, req.(*ListKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _KeyboardBinding_CreateKeyboardBinding0_HTTP_Handler(srv KeyboardBindingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateKeyboardBindingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKeyboardBindingCreateKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateKeyboardBinding(ctx, req.(*CreateKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _KeyboardBinding_UpdateKeyboardBinding0_HTTP_Handler(srv KeyboardBindingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateKeyboardBindingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKeyboardBindingUpdateKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateKeyboardBinding(ctx, req.(*UpdateKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _KeyboardBinding_DeleteKeyboardBinding0_HTTP_Handler(srv KeyboardBindingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteKeyboardBindingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKeyboardBindingDeleteKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteKeyboardBinding(ctx, req.(*DeleteKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

type KeyboardBindingHTTPClient interface {
	CreateKeyboardBinding(ctx context.Context, req *CreateKeyboardBindingRequest, opts ...http.CallOption) (rsp *CreateKeyboardBindingResponse, err error)
	DeleteKeyboardBinding(ctx context.Context, req *DeleteKeyboardBindingRequest, opts ...http.CallOption) (rsp *DeleteKeyboardBindingResponse, err error)
	ListKeyboardBinding(ctx context.Context, req *ListKeyboardBindingRequest, opts ...http.CallOption) (rsp *ListKeyboardBindingResponse, err error)
	UpdateKeyboardBinding(ctx context.Context, req *UpdateKeyboardBindingRequest, opts ...http.CallOption) (rsp *UpdateKeyboardBindingResponse, err error)
}

type KeyboardBindingHTTPClientImpl struct {
	cc *http.Client
}

func NewKeyboardBindingHTTPClient(client *http.Client) KeyboardBindingHTTPClient {
	return &KeyboardBindingHTTPClientImpl{client}
}

func (c *KeyboardBindingHTTPClientImpl) CreateKeyboardBinding(ctx context.Context, in *CreateKeyboardBindingRequest, opts ...http.CallOption) (*CreateKeyboardBindingResponse, error) {
	var out CreateKeyboardBindingResponse
	pattern := "/api/v1/keyboard-binding"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKeyboardBindingCreateKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KeyboardBindingHTTPClientImpl) DeleteKeyboardBinding(ctx context.Context, in *DeleteKeyboardBindingRequest, opts ...http.CallOption) (*DeleteKeyboardBindingResponse, error) {
	var out DeleteKeyboardBindingResponse
	pattern := "/api/v1/keyboard-binding/{bindingId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKeyboardBindingDeleteKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KeyboardBindingHTTPClientImpl) ListKeyboardBinding(ctx context.Context, in *ListKeyboardBindingRequest, opts ...http.CallOption) (*ListKeyboardBindingResponse, error) {
	var out ListKeyboardBindingResponse
	pattern := "/api/v1/keyboard-binding"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKeyboardBindingListKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KeyboardBindingHTTPClientImpl) UpdateKeyboardBinding(ctx context.Context, in *UpdateKeyboardBindingRequest, opts ...http.CallOption) (*UpdateKeyboardBindingResponse, error) {
	var out UpdateKeyboardBindingResponse
	pattern := "/api/v1/keyboard-binding/{bindingId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKeyboardBindingUpdateKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
