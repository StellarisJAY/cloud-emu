// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: button_layout.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ButtonLayout_ListButtonLayout_FullMethodName   = "/v1.ButtonLayout/ListButtonLayout"
	ButtonLayout_CreateButtonLayout_FullMethodName = "/v1.ButtonLayout/CreateButtonLayout"
	ButtonLayout_UpdateButtonLayout_FullMethodName = "/v1.ButtonLayout/UpdateButtonLayout"
	ButtonLayout_DeleteButtonLayout_FullMethodName = "/v1.ButtonLayout/DeleteButtonLayout"
)

// ButtonLayoutClient is the client API for ButtonLayout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ButtonLayoutClient interface {
	ListButtonLayout(ctx context.Context, in *ListButtonLayoutRequest, opts ...grpc.CallOption) (*ListButtonLayoutResponse, error)
	CreateButtonLayout(ctx context.Context, in *CreateButtonLayoutRequest, opts ...grpc.CallOption) (*CreateButtonLayoutResponse, error)
	UpdateButtonLayout(ctx context.Context, in *UpdateButtonLayoutRequest, opts ...grpc.CallOption) (*UpdateButtonLayoutResponse, error)
	DeleteButtonLayout(ctx context.Context, in *DeleteButtonLayoutRequest, opts ...grpc.CallOption) (*DeleteButtonLayoutResponse, error)
}

type buttonLayoutClient struct {
	cc grpc.ClientConnInterface
}

func NewButtonLayoutClient(cc grpc.ClientConnInterface) ButtonLayoutClient {
	return &buttonLayoutClient{cc}
}

func (c *buttonLayoutClient) ListButtonLayout(ctx context.Context, in *ListButtonLayoutRequest, opts ...grpc.CallOption) (*ListButtonLayoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListButtonLayoutResponse)
	err := c.cc.Invoke(ctx, ButtonLayout_ListButtonLayout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buttonLayoutClient) CreateButtonLayout(ctx context.Context, in *CreateButtonLayoutRequest, opts ...grpc.CallOption) (*CreateButtonLayoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateButtonLayoutResponse)
	err := c.cc.Invoke(ctx, ButtonLayout_CreateButtonLayout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buttonLayoutClient) UpdateButtonLayout(ctx context.Context, in *UpdateButtonLayoutRequest, opts ...grpc.CallOption) (*UpdateButtonLayoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateButtonLayoutResponse)
	err := c.cc.Invoke(ctx, ButtonLayout_UpdateButtonLayout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buttonLayoutClient) DeleteButtonLayout(ctx context.Context, in *DeleteButtonLayoutRequest, opts ...grpc.CallOption) (*DeleteButtonLayoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteButtonLayoutResponse)
	err := c.cc.Invoke(ctx, ButtonLayout_DeleteButtonLayout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ButtonLayoutServer is the server API for ButtonLayout service.
// All implementations must embed UnimplementedButtonLayoutServer
// for forward compatibility.
type ButtonLayoutServer interface {
	ListButtonLayout(context.Context, *ListButtonLayoutRequest) (*ListButtonLayoutResponse, error)
	CreateButtonLayout(context.Context, *CreateButtonLayoutRequest) (*CreateButtonLayoutResponse, error)
	UpdateButtonLayout(context.Context, *UpdateButtonLayoutRequest) (*UpdateButtonLayoutResponse, error)
	DeleteButtonLayout(context.Context, *DeleteButtonLayoutRequest) (*DeleteButtonLayoutResponse, error)
	mustEmbedUnimplementedButtonLayoutServer()
}

// UnimplementedButtonLayoutServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedButtonLayoutServer struct{}

func (UnimplementedButtonLayoutServer) ListButtonLayout(context.Context, *ListButtonLayoutRequest) (*ListButtonLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListButtonLayout not implemented")
}
func (UnimplementedButtonLayoutServer) CreateButtonLayout(context.Context, *CreateButtonLayoutRequest) (*CreateButtonLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateButtonLayout not implemented")
}
func (UnimplementedButtonLayoutServer) UpdateButtonLayout(context.Context, *UpdateButtonLayoutRequest) (*UpdateButtonLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateButtonLayout not implemented")
}
func (UnimplementedButtonLayoutServer) DeleteButtonLayout(context.Context, *DeleteButtonLayoutRequest) (*DeleteButtonLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteButtonLayout not implemented")
}
func (UnimplementedButtonLayoutServer) mustEmbedUnimplementedButtonLayoutServer() {}
func (UnimplementedButtonLayoutServer) testEmbeddedByValue()                      {}

// UnsafeButtonLayoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ButtonLayoutServer will
// result in compilation errors.
type UnsafeButtonLayoutServer interface {
	mustEmbedUnimplementedButtonLayoutServer()
}

func RegisterButtonLayoutServer(s grpc.ServiceRegistrar, srv ButtonLayoutServer) {
	// If the following call pancis, it indicates UnimplementedButtonLayoutServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ButtonLayout_ServiceDesc, srv)
}

func _ButtonLayout_ListButtonLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListButtonLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ButtonLayoutServer).ListButtonLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ButtonLayout_ListButtonLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ButtonLayoutServer).ListButtonLayout(ctx, req.(*ListButtonLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ButtonLayout_CreateButtonLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateButtonLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ButtonLayoutServer).CreateButtonLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ButtonLayout_CreateButtonLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ButtonLayoutServer).CreateButtonLayout(ctx, req.(*CreateButtonLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ButtonLayout_UpdateButtonLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateButtonLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ButtonLayoutServer).UpdateButtonLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ButtonLayout_UpdateButtonLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ButtonLayoutServer).UpdateButtonLayout(ctx, req.(*UpdateButtonLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ButtonLayout_DeleteButtonLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteButtonLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ButtonLayoutServer).DeleteButtonLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ButtonLayout_DeleteButtonLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ButtonLayoutServer).DeleteButtonLayout(ctx, req.(*DeleteButtonLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ButtonLayout_ServiceDesc is the grpc.ServiceDesc for ButtonLayout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ButtonLayout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ButtonLayout",
	HandlerType: (*ButtonLayoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListButtonLayout",
			Handler:    _ButtonLayout_ListButtonLayout_Handler,
		},
		{
			MethodName: "CreateButtonLayout",
			Handler:    _ButtonLayout_CreateButtonLayout_Handler,
		},
		{
			MethodName: "UpdateButtonLayout",
			Handler:    _ButtonLayout_UpdateButtonLayout_Handler,
		},
		{
			MethodName: "DeleteButtonLayout",
			Handler:    _ButtonLayout_DeleteButtonLayout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "button_layout.proto",
}
