// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: macro.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Macro_ListMacros_FullMethodName  = "/v1.Macro/ListMacros"
	Macro_CreateMacro_FullMethodName = "/v1.Macro/CreateMacro"
	Macro_DeleteMacro_FullMethodName = "/v1.Macro/DeleteMacro"
	Macro_ApplyMacro_FullMethodName  = "/v1.Macro/ApplyMacro"
)

// MacroClient is the client API for Macro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MacroClient interface {
	ListMacros(ctx context.Context, in *ListMacrosRequest, opts ...grpc.CallOption) (*ListMacrosResponse, error)
	CreateMacro(ctx context.Context, in *CreateMacroRequest, opts ...grpc.CallOption) (*CreateMacroResponse, error)
	DeleteMacro(ctx context.Context, in *DeleteMacroRequest, opts ...grpc.CallOption) (*DeleteMacroResponse, error)
	ApplyMacro(ctx context.Context, in *ApplyMacroRequest, opts ...grpc.CallOption) (*ApplyMacroResponse, error)
}

type macroClient struct {
	cc grpc.ClientConnInterface
}

func NewMacroClient(cc grpc.ClientConnInterface) MacroClient {
	return &macroClient{cc}
}

func (c *macroClient) ListMacros(ctx context.Context, in *ListMacrosRequest, opts ...grpc.CallOption) (*ListMacrosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMacrosResponse)
	err := c.cc.Invoke(ctx, Macro_ListMacros_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macroClient) CreateMacro(ctx context.Context, in *CreateMacroRequest, opts ...grpc.CallOption) (*CreateMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMacroResponse)
	err := c.cc.Invoke(ctx, Macro_CreateMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macroClient) DeleteMacro(ctx context.Context, in *DeleteMacroRequest, opts ...grpc.CallOption) (*DeleteMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMacroResponse)
	err := c.cc.Invoke(ctx, Macro_DeleteMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macroClient) ApplyMacro(ctx context.Context, in *ApplyMacroRequest, opts ...grpc.CallOption) (*ApplyMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyMacroResponse)
	err := c.cc.Invoke(ctx, Macro_ApplyMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MacroServer is the server API for Macro service.
// All implementations must embed UnimplementedMacroServer
// for forward compatibility.
type MacroServer interface {
	ListMacros(context.Context, *ListMacrosRequest) (*ListMacrosResponse, error)
	CreateMacro(context.Context, *CreateMacroRequest) (*CreateMacroResponse, error)
	DeleteMacro(context.Context, *DeleteMacroRequest) (*DeleteMacroResponse, error)
	ApplyMacro(context.Context, *ApplyMacroRequest) (*ApplyMacroResponse, error)
	mustEmbedUnimplementedMacroServer()
}

// UnimplementedMacroServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMacroServer struct{}

func (UnimplementedMacroServer) ListMacros(context.Context, *ListMacrosRequest) (*ListMacrosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMacros not implemented")
}
func (UnimplementedMacroServer) CreateMacro(context.Context, *CreateMacroRequest) (*CreateMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacro not implemented")
}
func (UnimplementedMacroServer) DeleteMacro(context.Context, *DeleteMacroRequest) (*DeleteMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMacro not implemented")
}
func (UnimplementedMacroServer) ApplyMacro(context.Context, *ApplyMacroRequest) (*ApplyMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyMacro not implemented")
}
func (UnimplementedMacroServer) mustEmbedUnimplementedMacroServer() {}
func (UnimplementedMacroServer) testEmbeddedByValue()               {}

// UnsafeMacroServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MacroServer will
// result in compilation errors.
type UnsafeMacroServer interface {
	mustEmbedUnimplementedMacroServer()
}

func RegisterMacroServer(s grpc.ServiceRegistrar, srv MacroServer) {
	// If the following call pancis, it indicates UnimplementedMacroServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Macro_ServiceDesc, srv)
}

func _Macro_ListMacros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMacrosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacroServer).ListMacros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macro_ListMacros_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacroServer).ListMacros(ctx, req.(*ListMacrosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macro_CreateMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacroServer).CreateMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macro_CreateMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacroServer).CreateMacro(ctx, req.(*CreateMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macro_DeleteMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacroServer).DeleteMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macro_DeleteMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacroServer).DeleteMacro(ctx, req.(*DeleteMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macro_ApplyMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacroServer).ApplyMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macro_ApplyMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacroServer).ApplyMacro(ctx, req.(*ApplyMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Macro_ServiceDesc is the grpc.ServiceDesc for Macro service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Macro_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Macro",
	HandlerType: (*MacroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMacros",
			Handler:    _Macro_ListMacros_Handler,
		},
		{
			MethodName: "CreateMacro",
			Handler:    _Macro_CreateMacro_Handler,
		},
		{
			MethodName: "DeleteMacro",
			Handler:    _Macro_DeleteMacro_Handler,
		},
		{
			MethodName: "ApplyMacro",
			Handler:    _Macro_ApplyMacro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "macro.proto",
}
