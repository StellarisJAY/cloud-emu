// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: button_layout.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationButtonLayoutCreateButtonLayout = "/v1.ButtonLayout/CreateButtonLayout"
const OperationButtonLayoutDeleteButtonLayout = "/v1.ButtonLayout/DeleteButtonLayout"
const OperationButtonLayoutListButtonLayout = "/v1.ButtonLayout/ListButtonLayout"
const OperationButtonLayoutUpdateButtonLayout = "/v1.ButtonLayout/UpdateButtonLayout"

type ButtonLayoutHTTPServer interface {
	CreateButtonLayout(context.Context, *CreateButtonLayoutRequest) (*CreateButtonLayoutResponse, error)
	DeleteButtonLayout(context.Context, *DeleteButtonLayoutRequest) (*DeleteButtonLayoutResponse, error)
	ListButtonLayout(context.Context, *ListButtonLayoutRequest) (*ListButtonLayoutResponse, error)
	UpdateButtonLayout(context.Context, *UpdateButtonLayoutRequest) (*UpdateButtonLayoutResponse, error)
}

func RegisterButtonLayoutHTTPServer(s *http.Server, srv ButtonLayoutHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/button-layout", _ButtonLayout_ListButtonLayout0_HTTP_Handler(srv))
	r.POST("/api/v1/button-layout", _ButtonLayout_CreateButtonLayout0_HTTP_Handler(srv))
	r.PUT("/api/v1/button-layout", _ButtonLayout_UpdateButtonLayout0_HTTP_Handler(srv))
	r.DELETE("/api/v1/button-layout/{layoutId}", _ButtonLayout_DeleteButtonLayout0_HTTP_Handler(srv))
}

func _ButtonLayout_ListButtonLayout0_HTTP_Handler(srv ButtonLayoutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListButtonLayoutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationButtonLayoutListButtonLayout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListButtonLayout(ctx, req.(*ListButtonLayoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListButtonLayoutResponse)
		return ctx.Result(200, reply)
	}
}

func _ButtonLayout_CreateButtonLayout0_HTTP_Handler(srv ButtonLayoutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateButtonLayoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationButtonLayoutCreateButtonLayout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateButtonLayout(ctx, req.(*CreateButtonLayoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateButtonLayoutResponse)
		return ctx.Result(200, reply)
	}
}

func _ButtonLayout_UpdateButtonLayout0_HTTP_Handler(srv ButtonLayoutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateButtonLayoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationButtonLayoutUpdateButtonLayout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateButtonLayout(ctx, req.(*UpdateButtonLayoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateButtonLayoutResponse)
		return ctx.Result(200, reply)
	}
}

func _ButtonLayout_DeleteButtonLayout0_HTTP_Handler(srv ButtonLayoutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteButtonLayoutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationButtonLayoutDeleteButtonLayout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteButtonLayout(ctx, req.(*DeleteButtonLayoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteButtonLayoutResponse)
		return ctx.Result(200, reply)
	}
}

type ButtonLayoutHTTPClient interface {
	CreateButtonLayout(ctx context.Context, req *CreateButtonLayoutRequest, opts ...http.CallOption) (rsp *CreateButtonLayoutResponse, err error)
	DeleteButtonLayout(ctx context.Context, req *DeleteButtonLayoutRequest, opts ...http.CallOption) (rsp *DeleteButtonLayoutResponse, err error)
	ListButtonLayout(ctx context.Context, req *ListButtonLayoutRequest, opts ...http.CallOption) (rsp *ListButtonLayoutResponse, err error)
	UpdateButtonLayout(ctx context.Context, req *UpdateButtonLayoutRequest, opts ...http.CallOption) (rsp *UpdateButtonLayoutResponse, err error)
}

type ButtonLayoutHTTPClientImpl struct {
	cc *http.Client
}

func NewButtonLayoutHTTPClient(client *http.Client) ButtonLayoutHTTPClient {
	return &ButtonLayoutHTTPClientImpl{client}
}

func (c *ButtonLayoutHTTPClientImpl) CreateButtonLayout(ctx context.Context, in *CreateButtonLayoutRequest, opts ...http.CallOption) (*CreateButtonLayoutResponse, error) {
	var out CreateButtonLayoutResponse
	pattern := "/api/v1/button-layout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationButtonLayoutCreateButtonLayout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ButtonLayoutHTTPClientImpl) DeleteButtonLayout(ctx context.Context, in *DeleteButtonLayoutRequest, opts ...http.CallOption) (*DeleteButtonLayoutResponse, error) {
	var out DeleteButtonLayoutResponse
	pattern := "/api/v1/button-layout/{layoutId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationButtonLayoutDeleteButtonLayout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ButtonLayoutHTTPClientImpl) ListButtonLayout(ctx context.Context, in *ListButtonLayoutRequest, opts ...http.CallOption) (*ListButtonLayoutResponse, error) {
	var out ListButtonLayoutResponse
	pattern := "/api/v1/button-layout"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationButtonLayoutListButtonLayout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ButtonLayoutHTTPClientImpl) UpdateButtonLayout(ctx context.Context, in *UpdateButtonLayoutRequest, opts ...http.CallOption) (*UpdateButtonLayoutResponse, error) {
	var out UpdateButtonLayoutResponse
	pattern := "/api/v1/button-layout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationButtonLayoutUpdateButtonLayout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
